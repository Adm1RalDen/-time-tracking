{"version":3,"sources":["Store/Store.js","Components/Content.jsx","Components/Footer.jsx","Components/Header.jsx","App.jsx","index.js"],"names":["Store","data","editingKey","counts","setData","props","setEditingKey","setCounts","decorate","action","observable","store","EditableContext","React","createContext","EditableCell","Consumer","getFieldDecorator","editing","dataIndex","title","record","inputType","children","index","restProps","Item","style","margin","rules","required","message","initialValue","EditableTable","inject","observer","columns","width","editable","render","text","isEditing","className","form","onClick","save","key","marginRight","onConfirm","cancel","disabled","deleteItem","okText","cancelText","type","edit","dataSourse","filter","item","validateFields","error","row","newData","findIndex","date","today","Date","getDate","slice","getMonth","getFullYear","getHours","getMinutes","getSeconds","getTimes","splice","push","components","body","cell","columnsMap","map","col","onCell","Content","Provider","value","bordered","dataSource","rowClassName","pagination","onChange","pageSize","EditableFormTable","Form","create","Title","Typography","Footer","level","Header","upload","dataUpload","JSON","parse","localStorage","getItem","length","warning","success","id","setItem","stringify","toString","futurePlan","workHours","App","Layout","stores","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.82bf2562.chunk.js","sourcesContent":["import { observable, action, decorate } from 'mobx';\r\n\r\nclass Store {\r\n    data = [];\r\n    editingKey = '';\r\n    counts = 0;\r\n\r\n    setData = (props) => {\r\n        this.data = props;\r\n    }\r\n    setEditingKey = (props) => {\r\n        this.editingKey = props;\r\n    }\r\n    setCounts = (props) => {\r\n        this.counts = props;\r\n    }\r\n}\r\ndecorate(Store, {\r\n    setData: action,\r\n    setCounts: action,\r\n    setEditingKey: action,\r\n    data: observable,\r\n    editingKey: observable,\r\n    counts: observable,\r\n});\r\n\r\nconst store = new Store();\r\n\r\nexport default store;\r\nexport { Store };","\r\nimport React, { useState } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport '../Style/Content.css';\r\nimport { Table, Input, InputNumber, Popconfirm, Form, Button, Icon } from 'antd';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Layout } from 'antd';\r\n\r\nconst EditableContext = React.createContext();\r\n\r\nfunction EditableCell(props) {\r\n  let getInput = () => {\r\n    if (props.inputType === 'number') {\r\n      return <InputNumber />;\r\n    }\r\n    return <Input />;\r\n  };\r\n  let renderCell = ({ getFieldDecorator }) => {\r\n    const {\r\n      editing,\r\n      dataIndex,\r\n      title,\r\n      inputType,\r\n      record,\r\n      index,\r\n      children,\r\n      ...restProps\r\n    } = props;\r\n    return (\r\n      <td {...restProps}>\r\n        {editing ? (\r\n          <Form.Item style={{ margin: 0 }}>\r\n            {getFieldDecorator(dataIndex, {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: `Please Input ${title}!`,\r\n                },\r\n              ],\r\n              initialValue: record[dataIndex],\r\n            })(getInput())}\r\n          </Form.Item>\r\n        ) : (\r\n            children\r\n          )}\r\n      </td>\r\n    );\r\n  };\r\n  return <EditableContext.Consumer>{renderCell}</EditableContext.Consumer>;\r\n}\r\n\r\nconst EditableTable = inject('Store')(observer(function (props) {\r\n  const { data, setData, editingKey, setEditingKey, counts, setCounts } = props.Store;\r\n  const columns = [\r\n    {\r\n      title: 'Date',\r\n      dataIndex: 'date',\r\n      width: '15%',\r\n      editable: false,\r\n    },\r\n    {\r\n      title: 'Message',\r\n      dataIndex: 'message',\r\n      width: '25%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'Future plan',\r\n      dataIndex: 'futurePlan',\r\n      width: '40%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'Worked hours',\r\n      dataIndex: 'workHours',\r\n      width: '10%',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'Delete / Edit',\r\n      dataIndex: 'operation',\r\n      render: (text, record) => {\r\n        // const { editingKey } = this.state;\r\n        const editable = isEditing(record);\r\n        return editable ? (\r\n          <span className='icon-div'>\r\n            <EditableContext.Consumer>\r\n              {form => (\r\n                <a\r\n                  onClick={() => save(form, record.key)}\r\n                  style={{ marginRight: 8 }}\r\n                >\r\n                  Save\r\n                </a>\r\n              )}\r\n            </EditableContext.Consumer>\r\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={() => cancel(record.key)}>\r\n              <a>Cancel</a>\r\n            </Popconfirm>\r\n          </span>\r\n        ) : (\r\n            <div className=\"icon-div\">\r\n              <a disabled={editingKey !== ''} >\r\n                <Popconfirm\r\n                  title=\" Sure delete this task?\"\r\n                  onConfirm={() => deleteItem(record.key)}\r\n                  okText=\"Yes\"\r\n                  cancelText=\"No\"\r\n                >\r\n                  <Icon type=\"delete\" className='icon' />\r\n                </Popconfirm>\r\n              </a>\r\n\r\n              <a disabled={editingKey !== ''} onClick={() => edit(record.key)}>\r\n                <Icon type=\"edit\" className='icon' />\r\n              </a>\r\n            </div>\r\n\r\n          );\r\n      },\r\n    },\r\n  ];\r\n\r\n  let isEditing = record => record.key === editingKey;\r\n\r\n  let getTimes = () => {\r\n    let today = new Date();\r\n    return (('0' + today.getDate()).slice(-2) + '-' + ('0' + (today.getMonth() + 1)).slice(-2) + '-' + today.getFullYear()\r\n      + \" \" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds());\r\n\r\n  }\r\n\r\n  let cancel = () => {\r\n    setEditingKey('');\r\n  }\r\n\r\n  let deleteItem = (key) => {\r\n    let dataSourse = [...data];\r\n    setData(dataSourse.filter(item => item.key !== key));\r\n  }\r\n\r\n  let save = (form, key) => {\r\n    form.validateFields((error, row) => {\r\n      if (error) {\r\n        return;\r\n      }\r\n      const newData = [...data];\r\n      const index = newData.findIndex(item => key === item.key);\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        item.date = getTimes();\r\n        newData.splice(index, 1, {\r\n          ...item,\r\n          ...row,\r\n        });\r\n        setData(newData);\r\n        setEditingKey('');\r\n        // this.setState({ data: newData, editingKey: '' });\r\n      } else {\r\n        newData.push(row);\r\n        setData(newData);\r\n        setEditingKey('');\r\n        // this.setState({ data: newData, editingKey: '' });\r\n      }\r\n    });\r\n  }\r\n\r\n  let edit = (key) => {\r\n    setEditingKey(key);\r\n  }\r\n\r\n  const components = {\r\n    body: {\r\n      cell: EditableCell,\r\n    },\r\n  };\r\n\r\n  const columnsMap = columns.map(col => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n    return {\r\n      ...col,\r\n      onCell: record => ({\r\n        record,\r\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    };\r\n  });\r\n  return (\r\n    <Layout.Content className='content'>\r\n      <EditableContext.Provider value={props.form}>\r\n        <Table\r\n          components={components}\r\n          bordered\r\n          dataSource={data}\r\n          columns={columnsMap}\r\n          rowClassName=\"editable-row\"\r\n          pagination={{\r\n            onChange: cancel,\r\n            pageSize: 7\r\n          }}\r\n        />\r\n      </EditableContext.Provider>\r\n    </Layout.Content>\r\n\r\n  );\r\n}\r\n));\r\n\r\nconst EditableFormTable = Form.create()(EditableTable);\r\nexport default EditableFormTable\r\n","import React from 'react'\r\nimport { Typography } from 'antd';\r\nimport { Layout } from 'antd';\r\nimport '../Style/Footer.css';\r\n\r\nconst { Title } = Typography;\r\nfunction Footer(props) {\r\n    return (\r\n        <Layout.Footer className = 'footer'>\r\n            <Title level={4}>Time Tracking. Created by Adm1RalDen</Title>\r\n        </Layout.Footer>\r\n    );\r\n}\r\nexport default Footer","import React from 'react'\r\nimport '../Style/Header.css';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Typography, Button, message, Icon, Popconfirm } from 'antd';\r\nimport { Layout } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst Header = inject('Store')(observer((props) => {\r\n    const { data, setData, counts, setCounts } = props.Store;\r\n    let getTimes = () => {\r\n        let today = new Date();\r\n        return (('0' + today.getDate()).slice(-2) + '-' + ('0' + (today.getMonth() + 1)).slice(-2) + '-' + today.getFullYear()\r\n            + \" \" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds());\r\n\r\n    }\r\n    let add = () => {\r\n        let newData = {\r\n            key: counts.toString(),\r\n            date: getTimes(),\r\n            message: '',\r\n            futurePlan: '',\r\n            workHours: 0\r\n        };\r\n        setData([...data, newData]);\r\n        setCounts(counts + 1);\r\n    }\r\n    let upload = () => {\r\n        let dataUpload = JSON.parse(localStorage.getItem('time-tracking-date'));\r\n        if (dataUpload !== null) {\r\n            if (dataUpload.length == 0) {\r\n                message.warning('data lenth equal zero');\r\n            } else {\r\n                setData(dataUpload);\r\n                message.success('Success upload');\r\n            }\r\n        } else {\r\n            message.error('Empty storage !');\r\n        }\r\n    }\r\n    let save = () => {\r\n        if (data.length === 0) {\r\n            message.warning('data lenth equal zero');\r\n        } else {\r\n            localStorage.setItem('time-tracking-date', JSON.stringify(data));\r\n            message.success('Success save');\r\n        }\r\n    }\r\n    return (\r\n        <Layout.Header>\r\n            <Title level={4} type='secondary' id='headerText'>Time Tracking</Title>\r\n            <div className='button-container'>\r\n                <Button type='primary' onClick={save}><Icon type=\"save\" /></Button>\r\n                {data.length !== 0 ?\r\n                    <Popconfirm title=\"Sure to upload?\" onConfirm={upload}>\r\n                        <Button type='primary'><Icon type=\"upload\" /></Button>\r\n                    </Popconfirm>\r\n                    :\r\n                    <Button type='primary' onClick={upload}><Icon type=\"upload\" /></Button>\r\n                }\r\n\r\n                <Button type='primary' onClick={add}><Icon type=\"plus\" /></Button>\r\n            </div>\r\n\r\n        </Layout.Header>\r\n\r\n    );\r\n}))\r\nexport default Header","import React from 'react';\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport { Layout } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport './Style/App.css';\r\n\r\nimport Contents from './Components/Content';\r\nimport Footers from './Components/Footer';\r\nimport Headers from './Components/Header';\r\nconst { Footer, Content } = Layout;\r\nconst App = inject('Store')(observer(\r\n    function App(props) {\r\n        return (\r\n            <div>\r\n                <Layout>\r\n                    <Headers />\r\n                    <Contents />\r\n                    <Footers />\r\n                </Layout>\r\n            </div>\r\n        );\r\n    }\r\n))\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Store from './Store/Store'\r\nimport { Provider } from 'mobx-react'\r\n\r\nimport App from './App';\r\n\r\nconst stores = { Store };\r\nReactDOM.render(\r\n    <Provider {...stores}>\r\n       <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n                                  "],"sourceRoot":""}